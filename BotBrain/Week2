Week  2  Report:

1.	DESCRIPTION:
This week, my main focus was to build the foundation of BotBrain, the smart assistant that will help students and visitors move around Chanakya University. I am working on designing the system architecture, identifying the key modules, and setting up an required database design. This structure will make it easier to implement coding, testing, and future upgrades.


2.	BLOCK DIAGRAM:

 

Flow of work:
User → UI → Bot → Database (for info) OR Pathfinding (for routes) → Back to UI

3.	FLOW CHART MODULE AND FEATURES EXPLANATION:

	The user types a query like “Shortest path from Hostel to Library”.
	The User Interface (currently a simple Python CLI) collects the input.
	The NLP & Bot Engine understands whether the request is for navigation or general information.
	If it’s a navigation request, the Pathfinding Module calculates the best route using algorithms (BFS for now, but UCS and A* will follow).
	If it’s an info query, the Database fetches details (like opening hours or staff info).
	Results are shown back to the user.



4.	METHODOLOGY:

Step 1: I will sketch the system design using draw.io or in other web-app(still working on the diagram part)

Step 2: Defined modules that is built a Python dictionary (graph) to represent the campus map.(described it in the sample code)

Step 3: Implemented and tested BFS for pathfinding between buildings.(DFS, UCS, A* algorithms still working on it)

Step 4: I’m working on the process to design database schema (tables for locations, staff, FAQs, events) in Google Sheets. (still working on it)

Step 5:  Integrate test code for CLI input/output and documented progress. (still working on it)


5.	 PEAS ANALYSIS:

Aspects

	
Details

Performance	Finds shortest/valid paths fast; retrieves info within seconds
Environment	Chanakya University (buildings, walkways, staff info, FAQs)
Actuators	Text output on CLI (later expandable to speech/GUI)
Sensors	
User queries: source, destination, info request




6.	 AGENT DESCRIPTION:

This is a goal-based agent:
•	It will have a map of the campus (model).
•	If the goal is “reach Library,” it finds the best route.
•	If the goal is “get info,” it answers from the database.

7.	DATABASE OUTLINE (still working on it):
	Locations Table : This table keeps information about all the main buildings. For each place, I added its name (like “Library” or “Canteen”), type (academic, hostel, admin etc.), opening hours (when it is accessible), and coordinates (to help with maps and pathfinding later).
	Staff Table:  This stores details about faculty and staff. Each entry has the name of the person, their office/room number, contact details, and the building they are located in. This makes it easy for students to look up where to find a particular professor or office.
	FAQs Table: This is a simple question-answer table. Each row has a common question (like “When does the library close?”), the answer.



8.	Appendix(these are code samples might develop and alter it later):


•	Campus graph:

a detailed Python dictionary representing your campus as a weighted graph, where keys are locations (nodes) and values are dictionaries of connected locations with distances (edges).







